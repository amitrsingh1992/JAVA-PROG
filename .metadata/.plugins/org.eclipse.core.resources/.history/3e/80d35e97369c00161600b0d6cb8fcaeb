import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
/*
Coupon Numbers
a)Description -> Given N distinct Coupon Numbers,
 how many random numbers do you need to generate distinct coupon number? 
 This program simulates this random process.
b)I/P -> N Distinct Coupon Number
c)Logic -> repeatedly choose a random number and check whether it's a new one.
d)O/P -> total random number needed to have all distinct numbers.
Functions => Write Class Static Functions to generate random number and to process distinct coupons.
*/


public class Coupons {
	private static int getRandomNumberInRange(int min, int max) {
/*
		if (min >= max) {
			throw new IllegalArgumentException("max must be greater than min");
		}
*/
		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int min = 1;
		int count = 0;
		Scanner n = new Scanner(System.in);
		System.out.println("Enter no .of distict coupon needed :");
		int max = n.nextInt();
		System.out.println("Entered no. of coupon needed is " + max);
		int[] r = new int[max];
		for (int i = 0; i < max; i++) 
		{
			 r[i]=getRandomNumberInRange(min, max);
			count++;
			Set<Integer> uniqKeys = new TreeSet<Integer>();
			uniqKeys.add(Arrays.asList(r));
			System.out.println("uniqKeys: " + uniqKeys);
			
		}

		
		n.close();
		
	}

}



